# Copyright 2016-2020 Swiss National Supercomputing Centre (CSCS/ETH Zurich)
# ReFrame Project Developers. See the top-level LICENSE file for details.
#
# SPDX-License-Identifier: BSD-3-Clause

import reframe as rfm
import reframe.utility.sanity as sn
import os
import re
from reframe.core.exceptions import SanityError

class GromacsBaseCheck(rfm.RunOnlyRegressionTest):
    def __init__(self,m):
        self.descr = ('Gromacs modules CPU check'
                      'RunOnlyRegressionTest')
        self.valid_prog_environs = ['*']
        self.prerun_cmds = ['hostname']
        self.exclusive_access = True
        self.modules = [m]
        self.time_limit = None
        self.executable = 'gmx_mpi'
        self.executable_opts = ['mdrun','-s ./ion_channel.tpr',
                                '-maxh 0.50','-resethway','-noconfout','-nsteps 10000']
        self.sanity_patterns = sn.assert_found(r'Performance:', self.stderr)
        self.perf_patterns = {
            'perf': sn.extractsingle(r'Performance:\s+(?P<perf>\S+)\s+\S+',
                                     self.stderr, 'perf', float),
        }
        self.maintainers = ['blacknail']
        self.tags = {'app','module','pro'}


    @rfm.run_before('run')
    def set_nodelist_limit(self):
        ##self.job.options += ['-w cas226']
        pass

    @rfm.run_after('performance')
    def print_nodename(self):
        if self.job.state == 'FAIL':
            print(self.job.nodelist)

@rfm.parameterized_test(*([m]
                          for m in ['gromacs/2019.2-gcc-9.2.0-openmpi', 'gromacs/2019.4-gcc-8.3.0-openmpi',
                           'gromacs/2019.4-intel-19.0.4-impi', 'gromacs/2019.4-gcc-9.2.0-openmpi', 
                           'gromacs/2019.2-gcc-8.3.0-openmpi']))
class GromacsCPUCheck(GromacsBaseCheck):
    def __init__(self,m):
        super().__init__(m)
        references = {
            'gromacs/2019.2-gcc-9.2.0-openmpi':{
                'pi2:cpu':{'perf': (42.148, None, 0.05, 'ns/day')}
            },
            'gromacs/2019.4-gcc-8.3.0-openmpi':{
                'pi2:cpu':{'perf': (43.668, None, 0.05, 'ns/day')}
            },
            'gromacs/2019.4-intel-19.0.4-impi':{
                'pi2:cpu':{'perf': (43.382, None, 0.05, 'ns/day')}
            },
            'gromacs/2019.4-gcc-9.2.0-openmpi':{
                'pi2:cpu':{'perf': (43.432, None, 0.05, 'ns/day')}
            },
            'gromacs/2019.2-gcc-8.3.0-openmpi':{
                'pi2:cpu':{'perf': (43.399, None, 0.05, 'ns/day')}
            },
            'gromacs/2019.4-gcc-9.3.0-openmpi':{
                'pi2:cpu':{'perf': (43, None, 0.05, 'ns/day')}
            }
        } 
        self.valid_systems = ['pi2:cpu']
        self.valid_prog_environs = ['*']
        self.variables = {
                            'I_MPI_FABRICS': 'shm:ofi',
                            'I_MPI_PMI_LIBRARY': '/usr/lib64/libpmi.so'
                        }
        self.num_cpus_per_task = 1
        self.num_tasks = 40
        self.num_tasks_per_node = 40
        self.exclusive_access = True
        self.time_limit = None
        if 'openmpi' in self.modules[0]:
            self.executable = '--mpi=pmi2 ' + self.executable
        # self.sanity_patterns = self.check_gromacs_speed(self.stderr)
        self.reference = references[m]
        self.maintainers = ['blacknail']
        self.tags = {'gromacs'}


@rfm.parameterized_test(*([m] for m in ['gromacs/2019.4-gcc-9.3.0-openmpi']))
class GromacsARMCheck(GromacsBaseCheck):
    def __init__(self,m):
        super().__init__(m)
        self.valid_systems = ['pi2:arm128c256g']
        self.valid_prog_environs = ['*']
        self.sourcesdir = None
        self.num_cpus_per_task = 1
        self.num_tasks = 128
        self.num_tasks_per_node = 128
        self.exclusive_access = True
        self.time_limit = None
        self.executable = self.executable
